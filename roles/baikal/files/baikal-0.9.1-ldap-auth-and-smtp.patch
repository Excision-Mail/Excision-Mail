diff --git a/Core/Frameworks/Baikal/Core/LDAP.php b/Core/Frameworks/Baikal/Core/LDAP.php
new file mode 100644
index 0000000..445ed86
--- /dev/null
+++ b/Core/Frameworks/Baikal/Core/LDAP.php
@@ -0,0 +1,168 @@
+<?php
+
+namespace Baikal\Core;
+
+/**
+ * This is an authentication backend that uses ldap.
+ *
+ * @copyright Copyright (C) fruux GmbH (https://fruux.com/)
+ * @author Michael NiewÃ¶hner (foss@mniewoehner.de)
+ * @author rosali (https://github.com/rosali)
+ * @author Evert Pot (http://evertpot.com/)
+ * @license http://sabre.io/license/ Modified BSD License
+ */
+class LDAP extends \Sabre\DAV\Auth\Backend\AbstractBasic
+{
+    /**
+     * Reference to PDO connection.
+     *
+     * @var PDO
+     */
+    protected $pdo;
+
+    /**
+     * PDO table name we'll be using.
+     *
+     * @var string
+     */
+    protected $table_name;
+
+    /**
+     * LDAP server uri.
+     * e.g. ldaps://ldap.example.org
+     *
+     * @var string
+     */
+    protected $ldap_uri;
+
+    /*
+     * LDAP dn pattern for binding
+     *
+     * %u   - gets replaced by full username
+     * %U   - gets replaced by user part when the
+     *        username is an email address
+     * %d   - gets replaced by domain part when the
+     *        username is an email address
+     * %1-9 - gets replaced by parts of the the domain
+     *        split by '.' in reverse order
+     *        mail.example.org: %1 = org, %2 = example, %3 = mail
+     *
+     * @var string
+     */
+    protected $ldap_dn;
+
+    /*
+     * LDAP attribute to use for name
+     *
+     * @var string
+     */
+    protected $ldap_cn;
+
+    /*
+     * LDAP attribute used for mail
+     *
+     * @var string
+     */
+    protected $ldap_mail;
+
+    /**
+     * Creates the backend object.
+     *
+     * @param string $ldap_uri
+     * @param string $ldap_dn
+     * @param string $ldap_cn
+     * @param string $ldap_mail
+     *
+     */
+    public function __construct(\PDO $pdo, $table_name = 'users', $ldap_uri = 'ldap://127.0.0.1', $ldap_dn = 'mail=%u', $ldap_cn = 'cn', $ldap_mail = 'mail')
+    {
+        $this->pdo        = $pdo;
+        $this->table_name = $table_name;
+        $this->ldap_uri   = $ldap_uri;
+        $this->ldap_dn    = $ldap_dn;
+        $this->ldap_cn    = $ldap_cn;
+        $this->ldap_mail  = $ldap_mail;
+    }
+
+    /**
+     * Connects to an LDAP server and tries to authenticate.
+     *
+     * @param string $username
+     * @param string $password
+     *
+     * @return bool
+     */
+    protected function ldapOpen($username, $password)
+    {
+        $conn = ldap_connect($this->ldap_uri);
+        if(!$conn)
+            return false;
+        if(!ldap_set_option($conn, LDAP_OPT_PROTOCOL_VERSION, 3))
+            return false;
+
+        $success = false;
+
+        $user_split = explode('@', $username, 2);
+        $ldap_user = $user_split[0];
+        $ldap_domain = '';
+        if (count($user_split) > 1)
+            $ldap_domain = $user_split[1];
+        $domain_split = array_reverse(explode('.', $ldap_domain));
+
+        $dn = str_replace('%u', $username, $this->ldap_dn);
+        $dn = str_replace('%U', $ldap_user, $dn);
+        $dn = str_replace('%d', $ldap_domain, $dn);
+        for($i = 1; $i <= count($domain_split) and $i <= 9; $i++)
+            $dn = str_replace('%' . $i, $domain_split[$i - 1], $dn);
+
+        try {
+            $bind = ldap_bind($conn, $dn, $password);
+            if ($bind) {
+                $success = true;
+            }
+        } catch (\ErrorException $e) {
+            error_log($e->getMessage());
+            error_log(ldap_error($conn));
+        }
+
+        if($success){
+            $stmt = $this->pdo->prepare('SELECT username, digesta1 FROM ' . $this->table_name . ' WHERE username = ?');
+            $stmt->execute([$username]);
+            $result = $stmt->fetchAll();
+
+            if (empty($result)) {
+                $search_results = ldap_read($conn, $dn, '(objectclass=*)', array($this->ldap_cn, $this->ldap_mail));
+                $entry = ldap_get_entries($conn, $search_results);
+                $user_displayname = $username;
+                $user_email = 'unset-email';
+                if (!empty($entry[0][$this->ldap_cn]))
+                    $user_displayname = $entry[0][$this->ldap_cn][0];
+                if (!empty($entry[0][$this->ldap_mail]))
+                    $user_email = $entry[0][$this->ldap_mail][0];
+
+                $user = new \Baikal\Model\User();
+                $user->set('username', $username);
+                $user->set('displayname', $user_displayname);
+                $user->set('email', $user_email);
+                $user->persist();
+            }
+        }
+
+        ldap_close($conn);
+
+        return $success;
+    }
+
+    /**
+     * Validates a username and password by trying to authenticate against LDAP.
+     *
+     * @param string $username
+     * @param string $password
+     *
+     * @return bool
+     */
+    protected function validateUserPass($username, $password)
+    {
+        return $this->ldapOpen($username, $password);
+    }
+}
diff --git a/Core/Frameworks/Baikal/Core/Server.php b/Core/Frameworks/Baikal/Core/Server.php
index f08c110..ac889f8 100644
--- a/Core/Frameworks/Baikal/Core/Server.php
+++ b/Core/Frameworks/Baikal/Core/Server.php
@@ -135,6 +135,8 @@ class Server {
             $authBackend = new \Baikal\Core\PDOBasicAuth($this->pdo, $this->authRealm);
         } elseif ($this->authType === 'Apache') {
             $authBackend = new \Sabre\DAV\Auth\Backend\Apache();
+        } elseif ($this->authType === 'LDAP') {
+            $authBackend = new \Baikal\Core\LDAP($this->pdo, 'users', $config['system']['ldap_uri'], $config['system']['ldap_dn'], $config['system']['ldap_cn'], $config['system']['ldap_mail']);
         } else {
             $authBackend = new \Sabre\DAV\Auth\Backend\PDO($this->pdo);
             $authBackend->setRealm($this->authRealm);
@@ -174,7 +176,7 @@ class Server {
             $this->server->addPlugin(new \Sabre\DAV\Sharing\Plugin());
             $this->server->addPlugin(new \Sabre\CalDAV\SharingPlugin());
             if (isset($config['system']["invite_from"]) && $config['system']["invite_from"] !== "") {
-                $this->server->addPlugin(new \Sabre\CalDAV\Schedule\IMipPlugin($config['system']["invite_from"]));
+                $this->server->addPlugin(new \Sabre\CalDAV\Schedule\IMipPlugin($config['system']["invite_from"], $config['system']['smtp_host'], $config['system']['smtp_port'], $config['system']['smtp_username'], $config['system']['smtp_password']));
             }
         }
         if ($this->enableCardDAV) {
diff --git a/Core/Frameworks/Baikal/Model/Config/Standard.php b/Core/Frameworks/Baikal/Model/Config/Standard.php
index 310d512..8b86c69 100644
--- a/Core/Frameworks/Baikal/Model/Config/Standard.php
+++ b/Core/Frameworks/Baikal/Model/Config/Standard.php
@@ -32,17 +32,25 @@ use Symfony\Component\Yaml\Yaml;
 class Standard extends \Baikal\Model\Config {
     # Default values
     protected $aData = [
-        "configured_version"    => BAIKAL_VERSION,
-        "timezone"              => "Europe/Paris",
-        "card_enabled"          => true,
-        "cal_enabled"           => true,
-        "dav_auth_type"         => "Digest",
-        "admin_passwordhash"    => "",
-        "failed_access_message" => "user %u authentication failure for Baikal",
+        "configured_version"     => BAIKAL_VERSION,
+        "timezone"               => "Europe/Paris",
+        "card_enabled"           => true,
+        "cal_enabled"            => true,
+        "dav_auth_type"          => "Digest",
+        "ldap_uri"               => "ldap://127.0.0.1",
+        "ldap_dn"                => "mail=%u",
+        "ldap_cn"                => "cn",
+        "ldap_mail"              => "mail",
+        "smtp_username"          => "",
+        "smtp_password"          => "",
+        "smtp_host"              => "",
+        "smtp_port"              => "465",
+        "admin_passwordhash"     => "",
+        "failed_access_message"  => "user %u authentication failure for Baikal",
         // While not editable as will change admin & any existing user passwords,
         // could be set to different value when migrating from legacy config
-        "auth_realm"            => "BaikalDAV",
-        "base_uri"              => "",
+        "auth_realm"             => "BaikalDAV",
+        "base_uri"               => "",
     ];
 
     function __construct() {
@@ -76,10 +84,50 @@ class Standard extends \Baikal\Model\Config {
             "help"  => "Leave empty to disable sending invite emails",
         ]));
 
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"  => "smtp_username",
+            "label" => "Username for SMTP server",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"  => "smtp_password",
+            "label" => "Password for SMTP server",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"  => "smtp_host",
+            "label" => "SMTP server address",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"  => "smtp_port",
+            "label" => "SMTP server port",
+        ]));
+
         $oMorpho->add(new \Formal\Element\Listbox([
             "prop"    => "dav_auth_type",
             "label"   => "WebDAV authentication type",
-            "options" => ["Digest", "Basic", "Apache"],
+            "options" => ["Digest", "Basic", "Apache", "LDAP"],
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"    => "ldap_uri",
+            "label"   => "URI of the LDAP server; default ldap://127.0.0.1",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"    => "ldap_dn",
+            "label"   => "User DN for bind; with replacments %u => username, %U => user part, %d => domain part of username, %1-9 parts of the domain in reverse order",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"    => "ldap_cn",
+            "label"   => "LDAP-attribute for displayname; default cn",
+        ]));
+
+        $oMorpho->add(new \Formal\Element\Text([
+            "prop"    => "ldap_mail",
+            "label"   => "LDAP-attribute for email; default mail",
         ]));
 
         $oMorpho->add(new \Formal\Element\Password([
diff --git a/vendor/sabre/dav/lib/CalDAV/Schedule/IMipPlugin.php b/vendor/sabre/dav/lib/CalDAV/Schedule/IMipPlugin.php
index e050ac2..86ab043 100644
--- a/vendor/sabre/dav/lib/CalDAV/Schedule/IMipPlugin.php
+++ b/vendor/sabre/dav/lib/CalDAV/Schedule/IMipPlugin.php
@@ -30,6 +30,12 @@ class IMipPlugin extends DAV\ServerPlugin
      */
     protected $senderEmail;
 
+    /**
+     * SMTP connection made by PEAR
+     *
+     */
+     protected $smtp;
+
     /**
      * ITipMessage.
      *
@@ -45,9 +51,11 @@ class IMipPlugin extends DAV\ServerPlugin
      *                             generally be some kind of no-reply email
      *                             address you own.
      */
-    public function __construct($senderEmail)
+    public function __construct($senderEmail, $smtp_host = "", $smtp_port = "", $smtp_username = "", $smtp_password = "")
     {
+        require_once "Mail.php";
         $this->senderEmail = $senderEmail;
+        $this->smtp = \Mail::factory('smtp', array ('host' => $smtp_host, 'port' => $smtp_port, 'auth' => true, 'username' => $smtp_username, 'password' => $smtp_password));
     }
 
     /*
@@ -127,20 +135,21 @@ class IMipPlugin extends DAV\ServerPlugin
                 break;
         }
 
-        $headers = [
-            'Reply-To: '.$sender,
-            'From: '.$iTipMessage->senderName.' <'.$this->senderEmail.'>',
-            'MIME-Version: 1.0',
-            'Content-Type: text/calendar; charset=UTF-8; method='.$iTipMessage->method,
-        ];
+        $headers = array(
+            'Reply-To' => $sender,
+            'From' => $iTipMessage->senderName.' <'.$this->senderEmail.'>',
+            'To' => $recipient,
+            'Subject' => $subject,
+            'MIME-Version' => '1.0',
+            'Content-Type' => 'text/calendar; charset=UTF-8; method='.$iTipMessage->method,
+        );
         if (DAV\Server::$exposeVersion) {
-            $headers[] = 'X-Sabre-Version: '.DAV\Version::VERSION;
+            $headers += ['X-Sabre-Version' => DAV\Version::VERSION];
         }
         $this->mail(
             $recipient,
-            $subject,
-            $iTipMessage->message->serialize(),
-            $headers
+            $headers,
+            $iTipMessage->message->serialize()
         );
         $iTipMessage->scheduleStatus = '1.1; Scheduling message is sent via iMip';
     }
@@ -152,13 +161,16 @@ class IMipPlugin extends DAV\ServerPlugin
      * This function is responsible for sending the actual email.
      *
      * @param string $to      Recipient email address
-     * @param string $subject Subject of the email
      * @param string $body    iCalendar body
      * @param array  $headers List of headers
      */
-    protected function mail($to, $subject, $body, array $headers)
+    protected function mail($to, array $headers, $body)
     {
-        mail($to, $subject, $body, implode("\r\n", $headers));
+        $mail = $this->smtp->send($to, $headers, $body);
+        if (\PEAR::isError($mail))
+            error_log($mail->getMessage());
+        else
+            error_log("Email successfully sent!");
     }
 
     // @codeCoverageIgnoreEnd
